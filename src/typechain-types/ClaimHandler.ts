/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ClaimHandler {
  export type ClaimParamStruct = {
    token: AddressLike;
    distributionId: BigNumberish;
    termsSignature: BytesLike;
  };

  export type ClaimParamStructOutput = [token: string, distributionId: bigint, termsSignature: string] & {
    token: string;
    distributionId: bigint;
    termsSignature: string;
  };

  export type DepositParamStruct = {
    account: AddressLike;
    amount: BigNumberish;
  };

  export type DepositParamStructOutput = [account: string, amount: bigint] & {
    account: string;
    amount: bigint;
  };

  export type TransferClaimParamStruct = {
    token: AddressLike;
    distributionId: BigNumberish;
    fromAccount: AddressLike;
    toAccount: AddressLike;
  };

  export type TransferClaimParamStructOutput = [
    token: string,
    distributionId: bigint,
    fromAccount: string,
    toAccount: string,
  ] & {
    token: string;
    distributionId: bigint;
    fromAccount: string;
    toAccount: string;
  };

  export type WithdrawParamStruct = {
    account: AddressLike;
    distributionId: BigNumberish;
  };

  export type WithdrawParamStructOutput = [account: string, distributionId: bigint] & {
    account: string;
    distributionId: bigint;
  };
}

export interface ClaimHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimFunds"
      | "claimVault"
      | "dataStore"
      | "depositFunds"
      | "eventEmitter"
      | "getClaimableAmount"
      | "getTotalClaimableAmount"
      | "removeTerms"
      | "roleStore"
      | "setTerms"
      | "transferClaim"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claimFunds", values: [ClaimHandler.ClaimParamStruct[], AddressLike]): string;
  encodeFunctionData(functionFragment: "claimVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [AddressLike, BigNumberish, ClaimHandler.DepositParamStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "eventEmitter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "getTotalClaimableAmount", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "removeTerms", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "setTerms", values: [BigNumberish, string]): string;
  encodeFunctionData(
    functionFragment: "transferClaim",
    values: [AddressLike, ClaimHandler.TransferClaimParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike, ClaimHandler.WithdrawParamStruct[], AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eventEmitter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaimableAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTotalClaimableAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTerms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawFunds", data: BytesLike): Result;
}

export interface ClaimHandler extends BaseContract {
  connect(runner?: ContractRunner | null): ClaimHandler;
  waitForDeployment(): Promise<this>;

  interface: ClaimHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

  claimFunds: TypedContractMethod<
    [params: ClaimHandler.ClaimParamStruct[], receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  claimVault: TypedContractMethod<[], [string], "view">;

  dataStore: TypedContractMethod<[], [string], "view">;

  depositFunds: TypedContractMethod<
    [token: AddressLike, distributionId: BigNumberish, params: ClaimHandler.DepositParamStruct[]],
    [void],
    "nonpayable"
  >;

  eventEmitter: TypedContractMethod<[], [string], "view">;

  getClaimableAmount: TypedContractMethod<
    [account: AddressLike, token: AddressLike, distributionIds: BigNumberish[]],
    [bigint],
    "view"
  >;

  getTotalClaimableAmount: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  removeTerms: TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;

  roleStore: TypedContractMethod<[], [string], "view">;

  setTerms: TypedContractMethod<[distributionId: BigNumberish, terms: string], [void], "nonpayable">;

  transferClaim: TypedContractMethod<
    [token: AddressLike, params: ClaimHandler.TransferClaimParamStruct[]],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [token: AddressLike, params: ClaimHandler.WithdrawParamStruct[], receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

  getFunction(
    nameOrSignature: "claimFunds"
  ): TypedContractMethod<[params: ClaimHandler.ClaimParamStruct[], receiver: AddressLike], [void], "nonpayable">;
  getFunction(nameOrSignature: "claimVault"): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "dataStore"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<
    [token: AddressLike, distributionId: BigNumberish, params: ClaimHandler.DepositParamStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(nameOrSignature: "eventEmitter"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimableAmount"
  ): TypedContractMethod<[account: AddressLike, token: AddressLike, distributionIds: BigNumberish[]], [bigint], "view">;
  getFunction(nameOrSignature: "getTotalClaimableAmount"): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeTerms"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(nameOrSignature: "roleStore"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setTerms"
  ): TypedContractMethod<[distributionId: BigNumberish, terms: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferClaim"
  ): TypedContractMethod<[token: AddressLike, params: ClaimHandler.TransferClaimParamStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [token: AddressLike, params: ClaimHandler.WithdrawParamStruct[], receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
