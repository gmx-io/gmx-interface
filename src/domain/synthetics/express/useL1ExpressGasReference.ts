import useSWR from "swr";
import { decodeFunctionResult, encodeFunctionData, size } from "viem";

import { ARBITRUM, ARBITRUM_SEPOLIA } from "config/chains";
import { useChainId } from "lib/chains";
import { metrics } from "lib/metrics";
import { useJsonRpcProvider } from "lib/rpc";
import { FREQUENT_UPDATE_INTERVAL } from "lib/timeConstants";
import { abis } from "sdk/abis";
import { getContract } from "sdk/configs/contracts";

const referenceDataPart =
  "d555d7b3000000000000000000000000000000000000000000000000000000000000006000000000000000000000000072abbf5016fedfa2fb190138c59dae7e885c7fb1000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000006807f75c00000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000000000000000002000000000000000000000000527fb0bcff63c47761039bb386cfe181a92a4701000000000000000000000000527fb0bcff63c47761039bb386cfe181a92a47010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000eaf88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000000000000000000000000000000000000003f66b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000070d95587d40a2caf56bd97485ab3eec10bee633600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000004054de2d434838e9a3c71ea78000000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002fda6d1a114aadaff558d6e000000000000000000000000000000000000000000000000000045515fcdfabbf5016fedfa2fb190138c59dae7e885c7fb100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000100000000000000000000000047c031236e19d024b42f8ae6780e44a573170703000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

export function useL1ExpressOrderGasReference() {
  const { chainId } = useChainId();
  const { provider } = useJsonRpcProvider(chainId);

  const hasL1Gas = chainId === ARBITRUM || chainId === ARBITRUM_SEPOLIA;

  const { data } = useSWR(hasL1Gas && provider ? [chainId, provider, "l1ExpressOrderGasReference"] : null, {
    refreshInterval: FREQUENT_UPDATE_INTERVAL,

    fetcher: async ([chainId, provider]) => {
      try {
        const referenceData = `0x${referenceDataPart}`;

        const referenceResult = await provider.call({
          to: getContract(chainId, "ArbitrumNodeInterface"),
          data: encodeFunctionData({
            abi: abis.ArbitrumNodeInterface,
            functionName: "gasEstimateL1Component",
            args: [getContract(chainId, "GelatoRelayRouter"), false, referenceData],
          }),
          value: 0n,
        });

        const referenceDecoded = decodeFunctionResult({
          abi: abis.ArbitrumNodeInterface,
          functionName: "gasEstimateL1Component",
          data: referenceResult,
        });

        return {
          gasLimit: referenceDecoded[0],
          sizeOfData: BigInt(size(referenceData)),
        };
      } catch (error) {
        metrics.pushError(error, "l1ExpressOrderGasReference");
        return undefined;
      }
    },
  });

  return data;
}
